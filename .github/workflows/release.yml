name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            artifact: sip
            make_target: sip
          - os: windows-latest
            name: windows
            artifact: sip.exe
            make_target: sip.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl git
    
    - name: Setup MinGW (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          make
    
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        export OS=Windows_NT
        echo "Building for Windows..."
        echo "Current directory: $(pwd)"
        echo "Files present:"
        ls -la
        echo "Compiler version:"
        g++ --version
        echo "Building sip.exe..."
        if make sip.exe; then
            echo "Build successful!"
            echo "Files after build:"
            ls -la
            file sip.exe || echo "file command not available"
        else
            echo "MinGW build failed, trying direct g++ compilation..."
            g++ -std=c++17 -O3 -Wall -Wextra -static-libgcc -static-libstdc++ sip.cpp -o sip.exe
        fi
    
    - name: Build (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: make ${{ matrix.make_target }}
    
    - name: Test binary (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        if [ -f "sip.exe" ]; then
            echo "sip.exe exists, testing..."
            ls -la sip.exe
            echo "Running version check..."
            ./sip.exe --version || echo "Version check failed with exit code $?"
        else
            echo "ERROR: sip.exe was not created!"
            ls -la
            exit 1
        fi
    
    - name: Test binary (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: ./sip --version
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: sip-${{ matrix.name }}
        path: ${{ matrix.artifact }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          sip-linux/sip
          sip-windows/sip.exe
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Installation
          
          ### Linux
          ```bash
          wget https://github.com/allocata/sip/releases/download/${{ github.ref_name }}/sip
          chmod +x sip
          sudo mv sip /usr/local/bin/
          ```
          
          ### Windows
          Download `sip.exe` and add it to your PATH.
          
          ### From Source
          ```bash
          git clone https://github.com/allocata/sip.git
          cd sip
          make
          ```
          
          ## What's Changed
          See the commits below for detailed changes.
